<?php

/**
 * @file
 * Main file for openy_gc_auth_custom module.
 */

use Drupal\Core\File\FileSystemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\migrate_plus\Entity\MigrationGroup;
use Drupal\file\Entity\File;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openy_gc_auth_custom_form_migration_group_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!$form['id']['#default_value']) {
    return;
  }
  $migration_group = MigrationGroup::load($form['id']['#default_value']);
  $shared_config = $migration_group->get('shared_configuration');
  if (!$shared_config) {
    return;
  }
  if (!in_array($shared_config['source']['plugin'], ['csv', 'csv_limit'])) {
    return;
  }
  $form_state->set('shared_configuration', $shared_config);
  $file_id = NULL;
  $files = \Drupal::entityTypeManager()->getStorage('file')
    ->loadByProperties(['uri' => $shared_config['source']['path']]);
  if (!empty($files)) {
    $file_id = reset($files)->id();
  }
  $form_state->set('csv_file_id', $file_id);
  $form['csv_file'] = [
    '#type' => 'managed_file',
    '#title' => t('CSV file'),
    '#description' => t('CSV file to import.'),
    '#upload_validators' => [
      'file_validate_extensions' => ['csv'],
    ],
    '#upload_location' => 'private://gc_auth/temp',
    '#default_value' => $file_id ? [$file_id] : NULL,
    '#required' => TRUE,
  ];

  array_unshift($form['actions']['submit']['#submit'], '_openy_gc_auth_custom_migration_group_edit_form_submit');
}

/**
 * Form submit callback.
 *
 * @param array $form
 *   An associative array containing the structure of the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _openy_gc_auth_custom_migration_group_edit_form_submit(array &$form, FormStateInterface $form_state) {
  $shared_config = $form_state->get('shared_configuration');
  $form_state->setValue('shared_configuration', $shared_config);
  $dir = 'private://gc_auth/import';
  $fid = reset($form_state->getValue('csv_file'));
  $csv_file_id = $form_state->get('csv_file_id');
  if ($fid == $csv_file_id) {
    return;
  }
  $file_usage = Drupal::service('file.usage');
  $migration_group_id = $form_state->getValue('id');
  // Handle old file.
  if ($csv_file_id && $file = File::load($csv_file_id)) {
    $file_usage->delete($file, 'openy_gc_auth_custom', 'migration_group', $migration_group_id);
  }
  // Handle new file.
  if ($fid && $file = File::load($fid)) {
    // Rename file.
    \Drupal::service('file_system')->prepareDirectory($dir, FileSystemInterface::CREATE_DIRECTORY);
    $file = file_move($file, $dir . '/gc_auth_custom_users.csv', FileSystemInterface::EXISTS_REPLACE);
    $uri = $file->getFileUri();
    $shared_config['source']['path'] = $uri;
    $form_state->setValue('shared_configuration', $shared_config);
    $file_usage->add($file, 'openy_gc_auth_custom', 'migration_group', $migration_group_id);
  }

  // Clear migration plugins cache so they load the updated shared configuration
  // from migration group.
  $plugin_manager = \Drupal::service('plugin.manager.migration');
  $plugin_manager->clearCachedDefinitions();
}

/**
 * Implements hook_mail().
 */
function openy_gc_auth_custom_mail($key, &$message, $params) {
  switch ($key) {
    case 'email_verification':
      $site_config = \Drupal::config('system.site');
      $message['from'] = $site_config->get('mail');
      $message['subject'] = t('@site_name: Virtual Y email verification', [
        '@site_name' => $site_config->get('name'),
      ]);
      $message['body'][] = $params['message'];
      break;
  }
}
